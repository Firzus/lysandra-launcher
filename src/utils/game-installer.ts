import { invoke } from '@tauri-apps/api/core'
import { join } from '@tauri-apps/api/path'

import i18n from './i18n'
import { fetchManifest } from './update-service'
import { checkFileHash, debugHashMismatch } from './hash-verification'
import { extractZipAsync } from './zip'
import { getGameData } from './game-data'
import {
  GameInstallConfiguration,
  generateGamePaths,
  saveInstallConfiguration,
  validateCustomInstallPath,
} from './install-config'

export type GameInstallProgress = {
  step:
    | 'fetching'
    | 'downloading'
    | 'verifying'
    | 'extracting'
    | 'installing'
    | 'cleaning'
    | 'complete'
  progress?: number
  message: string
}

export type GameInstallResult = {
  success: boolean
  version?: string
  error?: string
}

/**
 * T√©l√©charge et installe un jeu avec support pour les chemins personnalis√©s
 * Inspir√© des meilleures pratiques de Steam et Xbox App
 */
export async function downloadAndInstallGame(
  gameId: string,
  owner: string,
  repo: string,
  installConfig?: GameInstallConfiguration,
  onProgress?: (progress: GameInstallProgress) => void,
): Promise<GameInstallResult> {
  try {
    console.log(`üéÆ Starting installation of ${gameId} from ${owner}/${repo}`)

    // Si une configuration est fournie, la sauvegarder d'abord
    if (installConfig) {
      console.log(`üìã Using custom install configuration:`, installConfig)

      // Valider le chemin personnalis√© si sp√©cifi√© (valider le dossier "games" parent)
      if (installConfig.useCustomPath && installConfig.customInstallPath) {
        console.log(`üîç Validating custom games directory: ${installConfig.customInstallPath}`)
        onProgress?.({ step: 'fetching', message: 'Validation du dossier des jeux...' })

        const validation = await validateCustomInstallPath(installConfig.customInstallPath)

        if (!validation.valid) {
          throw new Error(`Dossier des jeux invalide: ${validation.error}`)
        }
        console.log(`‚úÖ Custom games directory validated`)
      }

      await saveInstallConfiguration(installConfig)
    }

    // G√©n√©rer les chemins bas√©s sur la configuration (personnalis√©e ou par d√©faut)
    const gamePaths = await generateGamePaths(gameId, installConfig)

    console.log(`üìÅ Using game paths:`, gamePaths)

    // 0. Initialiser la structure des dossiers selon les nouveaux chemins
    console.log(`üìÅ Initializing game directory structure...`)
    onProgress?.({ step: 'fetching', message: i18n.t('game.install.initializing_structure') })

    // Cr√©er manuellement la structure avec les nouveaux chemins
    await invoke('create_dir_all', { path: gamePaths.root })
    await invoke('create_dir_all', { path: gamePaths.install })
    await invoke('create_dir_all', { path: gamePaths.saves })
    await invoke('create_dir_all', { path: gamePaths.logs })
    await invoke('create_dir_all', { path: gamePaths.config })

    console.log(`‚úÖ Directory structure created at: ${gamePaths.root}`)

    // 1. R√©cup√©rer le manifeste
    console.log(`üìã Fetching manifest...`)
    onProgress?.({ step: 'fetching', message: i18n.t('game.install.fetching') })
    const manifest = await fetchManifest(owner, repo)
    const { version, url, hash } = manifest

    console.log(`‚úÖ Manifest fetched: version=${version}, url=${url}`)

    // 2. Pr√©parer les chemins de cache (toujours dans AppData pour les fichiers temporaires)
    console.log(`üìÇ Preparing cache paths...`)
    const appDataDir = await invoke<string>('get_app_data_dir')
    const cacheDir = await join(appDataDir, 'cache')
    const zipFileName = `${gameId}-${version}.zip`
    const zipFilePath = await join(cacheDir, zipFileName)

    console.log(`üì¶ Cache dir: ${cacheDir}`)
    console.log(`üì¶ Zip file path: ${zipFilePath}`)

    // S'assurer que le dossier cache existe
    console.log(`üìÅ Creating cache directory...`)
    await invoke('create_dir_all', { path: cacheDir })

    // 3. T√©l√©charger le jeu avec le nouveau syst√®me
    console.log(`‚¨áÔ∏è Starting download with new download manager...`)
    onProgress?.({
      step: 'downloading',
      message: i18n.t('game.install.downloading', { progress: 0 }),
    })

    // D√©marrer le t√©l√©chargement avec le nouveau gestionnaire
    const downloadId = await invoke<string>('start_download', {
      url,
      filePath: zipFilePath,
    })

    console.log(`üì• Download started with ID: ${downloadId}`)

    // Attendre que le t√©l√©chargement soit termin√© avec gestion des √©v√©nements
    await new Promise<void>((resolve, reject) => {
      let completed = false

      const checkDownloadStatus = async () => {
        try {
          const downloadProgress = await invoke<any>('get_download_progress', { downloadId })

          if (!downloadProgress) {
            if (!completed) {
              reject(new Error('Download not found'))
            }

            return
          }

          const progressPercentage = Math.round(downloadProgress.percentage || 0)

          console.log(`üìä Download status: ${downloadProgress.status} (${progressPercentage}%)`)

          // Mettre √† jour la progression
          if (downloadProgress.status === 'Downloading' || downloadProgress.status === 'Pending') {
            onProgress?.({
              step: 'downloading',
              progress: progressPercentage,
              message: i18n.t('game.install.downloading', { progress: progressPercentage }),
            })
          }

          if (downloadProgress.status === 'Completed') {
            if (!completed) {
              completed = true
              console.log(`‚úÖ Download completed - waiting for file sync...`)

              // Attendre un court d√©lai pour que le fichier soit compl√®tement synchronis√© sur le disque
              setTimeout(async () => {
                try {
                  // V√©rifier que le fichier existe et a une taille > 0
                  const fileExists = await invoke<boolean>('check_file_exists', {
                    path: zipFilePath,
                  })

                  if (fileExists) {
                    const fileSize = await invoke<number>('get_file_size', { path: zipFilePath })

                    console.log(`üì¶ Downloaded file size: ${fileSize} bytes`)

                    if (fileSize > 0) {
                      resolve()
                    } else {
                      reject(new Error('Downloaded file is empty'))
                    }
                  } else {
                    reject(new Error('Downloaded file not found'))
                  }
                } catch (error) {
                  reject(new Error(`File verification failed: ${error}`))
                }
              }, 2000) // Attendre 2 secondes pour la synchronisation
            }
          } else if (downloadProgress.status === 'Failed') {
            if (!completed) {
              completed = true
              reject(new Error(downloadProgress.error || 'Download failed'))
            }
          } else if (downloadProgress.status === 'Cancelled') {
            if (!completed) {
              completed = true
              reject(new Error('Download was cancelled'))
            }
          } else {
            // Continuer √† v√©rifier
            if (!completed) {
              setTimeout(checkDownloadStatus, 1000)
            }
          }
        } catch (error) {
          if (!completed) {
            completed = true
            reject(error)
          }
        }
      }

      // Commencer la v√©rification apr√®s un court d√©lai
      setTimeout(checkDownloadStatus, 500)
    })

    // 4. Attendre un d√©lai suppl√©mentaire pour s'assurer que le fichier est compl√®tement √©crit
    console.log(`‚è≥ Waiting for file to be fully written to disk...`)
    await new Promise((resolve) => setTimeout(resolve, 5000)) // Augment√© de 3s √† 5s

    // 5. V√©rifier l'int√©grit√© avec retry logic am√©lior√©
    console.log(`üîç Verifying file integrity...`)
    onProgress?.({ step: 'verifying', message: i18n.t('game.install.verifying') })

    // Am√©lioration de la v√©rification d'int√©grit√© avec retry
    let hashVerificationAttempts = 0
    const maxHashAttempts = 5 // Augment√© de 3 √† 5 tentatives
    let hashVerified = false

    while (hashVerificationAttempts < maxHashAttempts && !hashVerified) {
      try {
        // V√©rifier la taille et l'accessibilit√© avant la v√©rification d'int√©grit√©
        const fileExists = await invoke<boolean>('check_file_exists', { path: zipFilePath })

        if (!fileExists) {
          throw new Error(`Downloaded file not found: ${zipFilePath}`)
        }

        // Attendre plus longtemps avant la premi√®re tentative
        if (hashVerificationAttempts === 0) {
          console.log(`‚è≥ Initial wait before first hash check...`)
          await new Promise((resolve) => setTimeout(resolve, 3000))
        }

        const fileSize = await invoke<number>('get_file_size', { path: zipFilePath })

        console.log(
          `üì¶ File size before hash verification (attempt ${hashVerificationAttempts + 1}): ${fileSize} bytes`,
        )

        if (fileSize === 0) {
          throw new Error('Downloaded file is empty')
        }

        // V√©rifier que le fichier est accessible en lecture
        try {
          await invoke('read_binary_file_head', { path: zipFilePath, size: 1024 })
        } catch (readError) {
          console.log(`‚ö†Ô∏è File not yet readable, waiting longer...`)
          await new Promise((resolve) => setTimeout(resolve, 3000))
        }

        // V√©rification du hash avec attente suppl√©mentaire progressive
        if (hashVerificationAttempts > 0) {
          const waitTime = 3000 + hashVerificationAttempts * 2000 // 3s, 5s, 7s, 9s

          console.log(
            `‚è≥ Progressive wait before hash check (attempt ${hashVerificationAttempts + 1}): ${waitTime}ms...`,
          )
          await new Promise((resolve) => setTimeout(resolve, waitTime))
        }

        const hashCheckResult = await checkFileHash(zipFilePath, hash)

        if (hashCheckResult) {
          hashVerified = true
          console.log(`‚úÖ File integrity verified on attempt ${hashVerificationAttempts + 1}`)
        } else {
          hashVerificationAttempts++
          if (hashVerificationAttempts < maxHashAttempts) {
            console.log(
              `‚ö†Ô∏è Hash verification failed, retrying... (${hashVerificationAttempts}/${maxHashAttempts})`,
            )

            // Forcer la synchronisation du cache du syst√®me de fichiers
            try {
              await invoke('force_file_sync', { path: zipFilePath })
            } catch (syncError) {
              console.log(`‚ö†Ô∏è Could not force file sync: ${syncError}`)
            }
          } else {
            // Dernier √©chec - faire l'analyse de debug
            try {
              const actualHash = await invoke<string>('verify_file_integrity', {
                filePath: zipFilePath,
              })

              await debugHashMismatch(zipFilePath, hash, actualHash)
            } catch (debugError) {
              console.warn(`‚ö†Ô∏è Could not perform hash debug analysis:`, debugError)
            }
          }
        }
      } catch (error) {
        hashVerificationAttempts++
        console.error(`‚ùå Hash verification attempt ${hashVerificationAttempts} failed:`, error)

        if (hashVerificationAttempts < maxHashAttempts) {
          const waitTime = 5000 + hashVerificationAttempts * 1000

          console.log(`‚è≥ Waiting ${waitTime}ms before retry...`)
          await new Promise((resolve) => setTimeout(resolve, waitTime))
        }
      }
    }

    if (!hashVerified) {
      // Option de fallback : continuer malgr√© l'√©chec de v√©rification
      console.warn(
        `‚ö†Ô∏è ATTENTION: La v√©rification d'int√©grit√© a √©chou√© apr√®s ${maxHashAttempts} tentatives`,
      )
      console.warn(
        `üì¶ Le fichier a √©t√© t√©l√©charg√© avec la taille attendue: ${await invoke<number>('get_file_size', { path: zipFilePath })} bytes`,
      )
      console.warn(`üîÑ Nous allons continuer l'installation malgr√© l'√©chec de v√©rification`)
      console.warn(`‚ö†Ô∏è Si l'installation √©choue, ret√©l√©chargez le jeu`)

      // Debug suppl√©mentaire pour identifier le probl√®me
      console.warn(`üîç Hash Debug Information:`)
      console.warn(`   Expected: ${hash}`)
      console.warn(`   Received: L'utilisateur peut v√©rifier manuellement le fichier`)
      console.warn(`   File: ${zipFilePath}`)
      console.warn(`   Size: ${await invoke<number>('get_file_size', { path: zipFilePath })} bytes`)
      console.warn(`üí° Suggestion: V√©rifier si le manifeste GitHub a le bon hash`)

      // Notifier l'utilisateur via la progression
      onProgress?.({
        step: 'verifying',
        message: '‚ö†Ô∏è V√©rification √©chou√©e, installation en mode d√©grad√©...',
      })

      // Attendre 3 secondes pour que l'utilisateur puisse voir le message
      await new Promise((resolve) => setTimeout(resolve, 3000))
    }

    // 6. Extraire dans le dossier d'installation personnalis√©
    console.log(`üì¶ Extracting to: ${gamePaths.install}`)
    onProgress?.({ step: 'extracting', message: i18n.t('game.install.extracting') })

    // S'assurer que le dossier d'installation existe (double v√©rification)
    await invoke('create_dir_all', { path: gamePaths.install })

    // Extraction asynchrone avec progression
    await new Promise<void>((resolve, reject) => {
      extractZipAsync(zipFilePath, gamePaths.install, {
        onProgress: (progress) => {
          console.log(
            `üì¶ Extracting: ${progress.current_file} (${progress.files_processed}/${progress.total_files} - ${progress.percentage.toFixed(1)}%)`,
          )
          onProgress?.({
            step: 'extracting',
            progress: Math.round(progress.percentage),
            message: i18n.t('game.install.extracting_file', {
              file: progress.current_file,
              progress: Math.round(progress.percentage),
            }),
          })
        },
        onComplete: () => {
          console.log(`‚úÖ Extraction completed`)
          resolve()
        },
        onError: (error) => {
          console.error(`‚ùå Extraction failed:`, error)
          reject(new Error(`Extraction failed: ${error}`))
        },
      }).catch(reject)
    })

    // 7. Sauvegarder la version dans le nouveau chemin
    console.log(`üíæ Saving version file...`)
    onProgress?.({ step: 'installing', message: i18n.t('game.install.installing') })
    await invoke('write_text_file', {
      path: gamePaths.versionFile,
      content: version,
    })
    console.log(`‚úÖ Version file saved: ${version} at ${gamePaths.versionFile}`)

    // 8. Cr√©er les raccourcis si demand√©s
    if (installConfig?.createDesktopShortcut) {
      console.log(`üîó Creating desktop shortcut...`)
      // TODO: Impl√©menter la cr√©ation de raccourci
    }

    if (installConfig?.createStartMenuShortcut) {
      console.log(`üîó Creating start menu shortcut...`)
      // TODO: Impl√©menter la cr√©ation de raccourci
    }

    // 9. Nettoyer le fichier ZIP
    console.log(`üßπ Cleaning up...`)
    onProgress?.({ step: 'cleaning', message: i18n.t('game.install.cleaning') })
    try {
      await invoke('delete_file', { path: zipFilePath })
      console.log(`‚úÖ ZIP file deleted: ${zipFilePath}`)
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è Failed to cleanup ZIP file: ${cleanupError}`)
    }

    // 10. Finaliser l'installation
    console.log(`üéâ Installation completed successfully!`)

    // R√©cup√©rer le nom du jeu pour les traductions
    const gameData = getGameData(gameId)
    const gameName = gameData.name

    onProgress?.({
      step: 'complete',
      message: i18n.t('game.install.complete', { game: gameName, version }),
    })

    return {
      success: true,
      version,
    }
  } catch (error) {
    console.error(`‚ùå Installation failed:`, error)

    // Nettoyer les fichiers temporaires en cas d'erreur
    try {
      console.log(`üßπ Cleaning up failed installation files...`)
      // Note: On pourrait impl√©menter un nettoyage plus pr√©cis ici
    } catch (cleanupError) {
      console.warn(`‚ö†Ô∏è Failed to cleanup after installation error: ${cleanupError}`)
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

/**
 * V√©rifie si un jeu est install√© dans un chemin donn√©
 * @param gameId ID du jeu
 * @param customPath Chemin personnalis√© √† v√©rifier (optionnel)
 * @returns true si le jeu est install√©
 */
export async function isGameInstalled(gameId: string, customPath?: string): Promise<boolean> {
  try {
    const gamePaths = customPath
      ? await generateGamePaths(gameId, {
          gameId,
          useCustomPath: true,
          customInstallPath: customPath,
          createDesktopShortcut: false,
          createStartMenuShortcut: false,
        })
      : await generateGamePaths(gameId)

    const versionFileExists = await invoke<boolean>('check_file_exists', {
      path: gamePaths.versionFile,
    })
    const installDirExists = await invoke<boolean>('check_directory_exists', {
      path: gamePaths.install,
    })

    return versionFileExists && installDirExists
  } catch (error) {
    console.error(`Error checking if game ${gameId} is installed:`, error)

    return false
  }
}

/**
 * R√©cup√®re la version install√©e d'un jeu
 * @param gameId ID du jeu
 * @param customPath Chemin personnalis√© (optionnel)
 * @returns Version install√©e ou null si pas install√©
 */
export async function getInstalledGameVersion(
  gameId: string,
  customPath?: string,
): Promise<string | null> {
  try {
    const gamePaths = customPath
      ? await generateGamePaths(gameId, {
          gameId,
          useCustomPath: true,
          customInstallPath: customPath,
          createDesktopShortcut: false,
          createStartMenuShortcut: false,
        })
      : await generateGamePaths(gameId)

    const version = await invoke<string>('read_text_file', { path: gamePaths.versionFile })

    return version.trim()
  } catch (error) {
    console.error(`Error reading installed version for game ${gameId}:`, error)

    return null
  }
}
